{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/yilia/source/main.2d7529.css","path":"main.2d7529.css","modified":0,"renderable":1},{"_id":"themes/yilia/source/mobile.d238ee.js","path":"mobile.d238ee.js","modified":0,"renderable":1},{"_id":"themes/yilia/source/slider.885efe.js","path":"slider.885efe.js","modified":0,"renderable":1},{"_id":"source/img/ReduxFlow.png","path":"img/ReduxFlow.png","modified":0,"renderable":0},{"_id":"themes/yilia/source/main.2d7529.js","path":"main.2d7529.js","modified":0,"renderable":1},{"_id":"themes/yilia/source/fonts/default-skin.b257fa.svg","path":"fonts/default-skin.b257fa.svg","modified":0,"renderable":1},{"_id":"themes/yilia/source/fonts/iconfont.59e68b.eot","path":"fonts/iconfont.59e68b.eot","modified":0,"renderable":1},{"_id":"themes/yilia/source/fonts/iconfont.b7ae25.ttf","path":"fonts/iconfont.b7ae25.ttf","modified":0,"renderable":1},{"_id":"themes/yilia/source/fonts/iconfont.ca3627.woff","path":"fonts/iconfont.ca3627.woff","modified":0,"renderable":1},{"_id":"themes/yilia/source/fonts/tooltip.4004ff.svg","path":"fonts/tooltip.4004ff.svg","modified":0,"renderable":1},{"_id":"themes/yilia/source/fonts/iconfont.dba24b.svg","path":"fonts/iconfont.dba24b.svg","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/default-skin.png","path":"img/default-skin.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/preloader.gif","path":"img/preloader.gif","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/scrollbar_arrow.png","path":"img/scrollbar_arrow.png","modified":0,"renderable":1}],"Cache":[{"_id":"source/.DS_Store","hash":"93c50aa6ee36b132c6b9ef19f5eb3dd7e89692bb","modified":1490875962000},{"_id":"themes/yilia/.babelrc","hash":"db600d40e93e6d8023737a65d58d3be7370e5e30","modified":1490084256000},{"_id":"themes/yilia/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1490875826000},{"_id":"themes/yilia/.editorconfig","hash":"daaa8757fac18f8735fadd0a37a42c06f421ca14","modified":1490084256000},{"_id":"themes/yilia/.eslintignore","hash":"ed9d8911ca08c3dd5072c48dd0be4d06f8897730","modified":1490084256000},{"_id":"themes/yilia/.eslintrc.js","hash":"303d25adf02ad65720e537a16a4a137d14bb755f","modified":1490084256000},{"_id":"themes/yilia/.gitignore","hash":"d5fc575329853ff620b50fc62ad4b18fa09a308a","modified":1490084256000},{"_id":"themes/yilia/README.md","hash":"0becd9c18f9d44fc364788a34a4f3ec82ca7940a","modified":1490084256000},{"_id":"themes/yilia/_config.yml","hash":"409d8a9fd0a80107099fd0f19e50d9621f7bcfce","modified":1490521642000},{"_id":"themes/yilia/package.json","hash":"4631f9013f0b1c5fc5d73af4c3624375bfe4d109","modified":1490084256000},{"_id":"themes/yilia/webpack.config.js","hash":"14fe482547b12b15bc78cb981c42a4ca5b6ba770","modified":1490084256000},{"_id":"source/_posts/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1490872563000},{"_id":"source/_posts/nodejs-2017-03-21-schedule.md","hash":"9d15d54fd9d24a6cb4101e40bee2b3349aa41159","modified":1490880092000},{"_id":"source/_posts/reactjs-2017-03-28-redux.md","hash":"e49374f9e2aa20f36f4e9430fc1ad3fdd0aada3c","modified":1490873678000},{"_id":"source/_posts/公告-2017-03-26-background.md","hash":"5308d94a1657f0949c9147b335438d4249cb97ac","modified":1490872968000},{"_id":"source/archive/index.md","hash":"69040c7f2032b8e4a205b79210ada85f8dd7c5c1","modified":1490521382000},{"_id":"themes/yilia/languages/fr.yml","hash":"b4be1c1592a72012e48df2b3ec41cc9685573e50","modified":1490084256000},{"_id":"themes/yilia/languages/default.yml","hash":"f26a34a7983d4bc17c65c7f0f14da598e62ce66d","modified":1490084256000},{"_id":"themes/yilia/languages/no.yml","hash":"ddf2035e920a5ecb9076138c184257d9f51896a7","modified":1490084256000},{"_id":"themes/yilia/languages/zh-CN.yml","hash":"b057f389c6713010f97d461e48ec959b0b6f3b44","modified":1490084256000},{"_id":"themes/yilia/languages/ru.yml","hash":"2a476b4c6e04900914c81378941640ac5d58a1f0","modified":1490084256000},{"_id":"themes/yilia/languages/nl.yml","hash":"3d82ec703d0b3287739d7cb4750a715ae83bfcb3","modified":1490084256000},{"_id":"themes/yilia/languages/zh-tw.yml","hash":"f5f0ca88185da7a8457760d84bf221781473bd7c","modified":1490084256000},{"_id":"themes/yilia/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1490084256000},{"_id":"themes/yilia/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1490084256000},{"_id":"themes/yilia/layout/index.ejs","hash":"ec498c6c0606acde997ce195dad97b267418d980","modified":1490084256000},{"_id":"themes/yilia/layout/layout.ejs","hash":"b471ab706d48e0be3f783eab1c94bf5878ef5a94","modified":1490084256000},{"_id":"themes/yilia/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1490084256000},{"_id":"themes/yilia/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1490084256000},{"_id":"themes/yilia/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1490084256000},{"_id":"themes/yilia/source/main.2d7529.css","hash":"2eef112e365f9b00664302ba98b517662c75d411","modified":1490084256000},{"_id":"themes/yilia/source/mobile.d238ee.js","hash":"a054884092af1cc5c2c14e5e11a4dac6d9254481","modified":1490084256000},{"_id":"themes/yilia/source-src/css.ejs","hash":"cf7eab48d626433120d1ef9697f719a359817018","modified":1490084256000},{"_id":"themes/yilia/source/slider.885efe.js","hash":"41a76cb10a2b344d54a15ffac68d17331fc6f3d6","modified":1490084256000},{"_id":"themes/yilia/source-src/script.ejs","hash":"28abac2426761d7e715b38aadd86ce6549c8ae77","modified":1490084256000},{"_id":"source/img/ReduxFlow.png","hash":"a3c62d2d79510ce6216de272d10db1f2b959da32","modified":1488340144000},{"_id":"themes/yilia/source/main.2d7529.js","hash":"a0359e7962038f53f9ffbd02dcc52485f8e04da8","modified":1490084256000},{"_id":"themes/yilia/layout/_partial/article.ejs","hash":"4767e666849ac2600c7a1cbf94c54cf702864f80","modified":1490084256000},{"_id":"themes/yilia/layout/_partial/archive.ejs","hash":"a4eacc2bc1278095a0ef99f904b0634c78f980eb","modified":1490084256000},{"_id":"themes/yilia/layout/_partial/after-footer.ejs","hash":"61c95c49baa2c1bfd99cf88c55ba205b44bf3d97","modified":1490084256000},{"_id":"themes/yilia/layout/_partial/archive-post.ejs","hash":"edc0154b30a4127acda10297bec6aacf754b4ac4","modified":1490084256000},{"_id":"themes/yilia/layout/_partial/css.ejs","hash":"db8c42ab7e339c240b7044896a3987555ea9b5b8","modified":1490084256000},{"_id":"themes/yilia/layout/_partial/head.ejs","hash":"12ca7d8dba56bc767b9309dda9526dcbaffc1614","modified":1490084256000},{"_id":"themes/yilia/layout/_partial/footer.ejs","hash":"871f81cacd5d41cb2eb001cd56254217a857dc2f","modified":1490084256000},{"_id":"themes/yilia/layout/_partial/baidu-analytics.ejs","hash":"155327c23607f69989b58845f24d842a54e504b8","modified":1490084256000},{"_id":"themes/yilia/layout/_partial/google-analytics.ejs","hash":"1ccc627d7697e68fddc367c73ac09920457e5b35","modified":1490084256000},{"_id":"themes/yilia/layout/_partial/left-col.ejs","hash":"e2b3f2b3631ef211a4d98d11f0da2d285340f10e","modified":1490084256000},{"_id":"themes/yilia/layout/_partial/header.ejs","hash":"b69855e07b65117769adc515cb64b803932068c9","modified":1490084256000},{"_id":"themes/yilia/layout/_partial/mathjax.ejs","hash":"11550a418921d330e6553be0569a94ab5a217967","modified":1490084256000},{"_id":"themes/yilia/layout/_partial/script.ejs","hash":"8c295469bd1602e9d3bbf2fee81ff84cacb1d701","modified":1490084256000},{"_id":"themes/yilia/layout/_partial/mobile-nav.ejs","hash":"ccec1fc70f021cb50ac85b524e7949878ab93a18","modified":1490084256000},{"_id":"themes/yilia/layout/_partial/viewer.ejs","hash":"cc1c39903aed0a0601d104238d2bbd13ad2a36f3","modified":1490084256000},{"_id":"themes/yilia/source/fonts/default-skin.b257fa.svg","hash":"2ac727c9e092331d35cce95af209ccfac6d4c7c7","modified":1490084256000},{"_id":"themes/yilia/layout/_partial/tools.ejs","hash":"538b6d35b25cbdba7dc77feec638336625c8ef8b","modified":1490084256000},{"_id":"themes/yilia/source/fonts/iconfont.59e68b.eot","hash":"b7f28dc802d6e32281e8fe7930d4dd2022d00717","modified":1490084256000},{"_id":"themes/yilia/source/fonts/iconfont.b7ae25.ttf","hash":"697449e7790edd12e208706ecaa8d5d0eed44cde","modified":1490084256000},{"_id":"themes/yilia/source/fonts/iconfont.ca3627.woff","hash":"cda0ea1dc25dc3d329d7637afe2cd6aec37e351b","modified":1490084256000},{"_id":"themes/yilia/source/fonts/tooltip.4004ff.svg","hash":"397fe4b1093bf9b62457dac48aa15dac06b54a3c","modified":1490084256000},{"_id":"themes/yilia/source/fonts/iconfont.dba24b.svg","hash":"f6c8d119c14f2124f4362acd6c8e00f209af5613","modified":1490084256000},{"_id":"themes/yilia/source/img/default-skin.png","hash":"ed95a8e40a2c3478c5915376acb8e5f33677f24d","modified":1490084256000},{"_id":"themes/yilia/source/img/preloader.gif","hash":"6342367c93c82da1b9c620e97c84a389cc43d96d","modified":1490084256000},{"_id":"themes/yilia/source/img/scrollbar_arrow.png","hash":"d64a33c4ddfbdb89deeb6f4e3d36eb84dc4777c0","modified":1490084256000},{"_id":"themes/yilia/source-src/css/_core.scss","hash":"29ba600e98ed55f7af4ade8038272c84cba21188","modified":1490084256000},{"_id":"themes/yilia/source-src/css/_function.scss","hash":"ce227b6f5a9af194fd5d455200630f32c05e151f","modified":1490084256000},{"_id":"themes/yilia/source-src/css/archive.scss","hash":"8a0ae8ee6af8df3f215f1cd4ecc10145a5b92cf0","modified":1490084256000},{"_id":"themes/yilia/source-src/css/article-inner.scss","hash":"4115c4518cca3f5cf461018aa7a7321138d017cc","modified":1490084256000},{"_id":"themes/yilia/source-src/css/article-main.scss","hash":"1577a2336b3ad122f49f60dff2bc1a97d4e7b18b","modified":1490084256000},{"_id":"themes/yilia/source-src/css/article-nav.scss","hash":"9069371dcc65eee63081a21e8a56a9f3dbf64c08","modified":1490084256000},{"_id":"themes/yilia/source-src/css/article.scss","hash":"55d082fec4c6bb341725567acaa29ce37d50320a","modified":1490084256000},{"_id":"themes/yilia/source-src/css/duoshuo.scss","hash":"948e44c47c3d70584da93e7ce025dede9b7573d7","modified":1490084256000},{"_id":"themes/yilia/source-src/css/fonts.scss","hash":"5dc23be94451d54f0757de85747fd75061e8cf52","modified":1490084256000},{"_id":"themes/yilia/source-src/css/footer.scss","hash":"7ca837a4cc34db1c35f01baec85eb10ccc64ea86","modified":1490084256000},{"_id":"themes/yilia/source-src/css/global.scss","hash":"b4cb4f45a55d4250cd9056f76dab2a3c0dabcec4","modified":1490084256000},{"_id":"themes/yilia/source-src/css/grid.scss","hash":"f53ea8270752b5919ec5d79224d22af91f2eda12","modified":1490084256000},{"_id":"themes/yilia/source-src/css/highlight.scss","hash":"40e5aa5056dc0b3b9f51c5b387370b612e265d4e","modified":1490084256000},{"_id":"themes/yilia/source-src/css/mobile-slider.scss","hash":"19f10fd2f0c3377aa4b165b3c2291ecf86dd9351","modified":1490084256000},{"_id":"themes/yilia/source-src/css/left.scss","hash":"1ee3dd6fa50186af5bedb09d4a0e6b47ddb1b57b","modified":1490084256000},{"_id":"themes/yilia/source-src/css/main.scss","hash":"b63c0f9b3bf68efc3bcd7c816bcac6f2fb827528","modified":1490084256000},{"_id":"themes/yilia/source-src/css/mobile.scss","hash":"28a01c3d85ec3194095f96988642a16d461f1077","modified":1490084256000},{"_id":"themes/yilia/source-src/css/page.scss","hash":"244c4d75c375978ff9edb74acc68825e63c6b235","modified":1490084256000},{"_id":"themes/yilia/source-src/css/reward.scss","hash":"a557a9ed244c82b8b71e9da9de3339d92783499f","modified":1490084256000},{"_id":"themes/yilia/source-src/css/scroll.scss","hash":"2495f7e4e3b055735c531f944b5f40a118a351ec","modified":1490084256000},{"_id":"themes/yilia/source-src/css/share.scss","hash":"9d6f6884f40c191882e56a1e1e1192400944a515","modified":1490084256000},{"_id":"themes/yilia/source-src/css/social.scss","hash":"70c2e36b7161717feed1f231271ed693c36407d1","modified":1490084256000},{"_id":"themes/yilia/source-src/css/tags-cloud.scss","hash":"399744e98e7c67939ed9b23c2670d8baad044eda","modified":1490084256000},{"_id":"themes/yilia/source-src/css/tags.scss","hash":"915c93edd67c5326695cc7dc84b14c5f154dbcc8","modified":1490084256000},{"_id":"themes/yilia/source-src/css/tools.scss","hash":"f5bed08765a8f0a344af5d4781ff822a57028148","modified":1490084256000},{"_id":"themes/yilia/source-src/css/tooltip.scss","hash":"b81cedbe31accca82e597801186911a7b5e6841c","modified":1490084256000},{"_id":"themes/yilia/source-src/js/anm.js","hash":"d18f6276a352b871390a4112d479b9e58b8cdbbe","modified":1490084256000},{"_id":"themes/yilia/source-src/js/fix.js","hash":"eccdcc7ee79adebf450bc655b2e80eb6801421a6","modified":1490084256000},{"_id":"themes/yilia/source-src/js/browser.js","hash":"4dc04845cf27f350922b63f1813a9c82e6e33b05","modified":1490084256000},{"_id":"themes/yilia/source-src/js/Q.js","hash":"e56d9710afa79b31ca6b9fbd845f6d1895f5214b","modified":1490084256000},{"_id":"themes/yilia/source-src/js/main.js","hash":"93ca570a646c6087821d7b14cb1646bb2a0274f4","modified":1490084256000},{"_id":"themes/yilia/source-src/js/share.js","hash":"d4ccff8266c37363b3904226f5d035b7db882c61","modified":1490084256000},{"_id":"themes/yilia/source-src/js/mobile.js","hash":"461c08ffcbc724d74ec7e0ff38e171eefe0f89fd","modified":1490084256000},{"_id":"themes/yilia/source-src/js/report.js","hash":"57680f9a23bd0a1eaafd64ae08cc33e20627ab15","modified":1490084256000},{"_id":"themes/yilia/source-src/js/util.js","hash":"3bcdeb95072b85600874424e6929e3e22cfddaa0","modified":1490084256000},{"_id":"themes/yilia/source-src/js/slider.js","hash":"707842efee006e3ea9b6765d7460f4ef4f08e41f","modified":1490084256000},{"_id":"themes/yilia/source-src/js/viewer.js","hash":"3e0fd4479a40ddbd1571c6c953df7e23637b61f5","modified":1490084256000},{"_id":"themes/yilia/layout/_partial/post/date.ejs","hash":"aae96de18d48cd3b9b7bf6fed0100e15b53cca97","modified":1490084256000},{"_id":"themes/yilia/layout/_partial/post/category.ejs","hash":"f75b236818b6c0ec0e5e6c12a517825d6230d756","modified":1490084256000},{"_id":"themes/yilia/layout/_partial/post/duoshuo.ejs","hash":"f6b4c4eaafb5ac386273354b5f64a26139b7a3b0","modified":1490084256000},{"_id":"themes/yilia/layout/_partial/post/share.ejs","hash":"06a2dd18ac9a43fbc9a59c61e6f795f9326e9927","modified":1490084256000},{"_id":"themes/yilia/layout/_partial/post/nav.ejs","hash":"b6a97043f9ec37e571aacacfedcda1d4d75e3c7c","modified":1490084256000},{"_id":"themes/yilia/layout/_partial/post/tag.ejs","hash":"2c4e4ca36c9bb4318506c38aca7127f1f44d827f","modified":1490084256000},{"_id":"themes/yilia/layout/_partial/post/title.ejs","hash":"d4a460a35e2112d0c7414fd5e19b3a16093f1caf","modified":1490084256000},{"_id":"themes/yilia/source-src/css/core/_animation.scss","hash":"1834c3ed8560716e63bb3a50be94cac87fbbeaf3","modified":1490084256000},{"_id":"themes/yilia/source-src/css/core/_media-queries.scss","hash":"262ffcd88775080b7f511db37f58d2bcb1b2bfc7","modified":1490084256000},{"_id":"themes/yilia/source-src/css/core/_mixin.scss","hash":"91db061c9c17628291a005e5bd4936cf9d35a6c4","modified":1490084256000},{"_id":"themes/yilia/source-src/css/fonts/iconfont.eot","hash":"b7f28dc802d6e32281e8fe7930d4dd2022d00717","modified":1490084256000},{"_id":"themes/yilia/source-src/css/core/_reset.scss","hash":"398a49913b4a47d928103562b1ce94520be4026a","modified":1490084256000},{"_id":"themes/yilia/source-src/css/core/_variables.scss","hash":"6e75bdaa46de83094ba0873099c6e7d656a22453","modified":1490084256000},{"_id":"themes/yilia/source-src/css/fonts/iconfont.svg","hash":"f6c8d119c14f2124f4362acd6c8e00f209af5613","modified":1490084256000},{"_id":"themes/yilia/source-src/css/fonts/iconfont.ttf","hash":"697449e7790edd12e208706ecaa8d5d0eed44cde","modified":1490084256000},{"_id":"themes/yilia/source-src/css/fonts/iconfont.woff","hash":"cda0ea1dc25dc3d329d7637afe2cd6aec37e351b","modified":1490084256000},{"_id":"themes/yilia/source-src/css/img/checkered-pattern.png","hash":"049262fa0886989d750637b264bed34ab51c23c8","modified":1490084256000},{"_id":"themes/yilia/source-src/css/img/scrollbar_arrow.png","hash":"d64a33c4ddfbdb89deeb6f4e3d36eb84dc4777c0","modified":1490084256000},{"_id":"themes/yilia/source-src/css/img/tooltip.svg","hash":"397fe4b1093bf9b62457dac48aa15dac06b54a3c","modified":1490084256000},{"_id":"source/nodejs-深入浅出.pdf","hash":"36f3db49029a48c1dd4cd5101c18aca0b67c7132","modified":1489414485000},{"_id":"source/nodejs-了不起.pdf","hash":"f3d0219f298f0e7a0cd4d919ecae740dd9ac8dd0","modified":1490021110000},{"_id":"public/content.json","hash":"3c559b86697264d68025646d7bcc92978e5c1f37","modified":1490878555674},{"_id":"public/archive/index.html","hash":"d34b3692d27f0325c2b1c015cfeb177a94de50ae","modified":1490878555845},{"_id":"public/reactjs/reactjs-2017-03-28-redux/index.html","hash":"9b3680fd6bd702faeff83108a40f92a0923bc4d4","modified":1490878555851},{"_id":"public/公告/公告-2017-03-26-background/index.html","hash":"78b86da9f275811a4ec5d2affdc7c4fb796ef3d0","modified":1490878555851},{"_id":"public/nodejs/nodejs-2017-03-21-schedule/index.html","hash":"db6ea0d302f0d4b98a6b8c575e490a2e9fcd875c","modified":1490878555851},{"_id":"public/archives/index.html","hash":"691d78d61eb5a264149c4b1f099449e6c92eeea5","modified":1490878555851},{"_id":"public/archives/2017/index.html","hash":"bf9e1ef17b936d403566d17f3d2319352ae3899f","modified":1490878555851},{"_id":"public/archives/2017/03/index.html","hash":"28fc627a0abc627e3956a21db97f42e471a19897","modified":1490878555852},{"_id":"public/categories/nodejs/index.html","hash":"f5d93a93ea143ab25561c6b528440850f97da7b6","modified":1490878555852},{"_id":"public/categories/reactjs/index.html","hash":"aaa89ad8b1e67306c8fc97b730329df28641e2dc","modified":1490878555852},{"_id":"public/categories/公告/index.html","hash":"3a483b1f070b433e72aeb45731e3c3e4101814bf","modified":1490878555852},{"_id":"public/index.html","hash":"d7eff44bb3d9b862a7cc46bac7e315a1f1053130","modified":1490878555852},{"_id":"public/tags/nodejs/index.html","hash":"07f75eb56cd0c2f2bd79ba0518cc335e381517d5","modified":1490878555852},{"_id":"public/tags/了不起的nodejs/index.html","hash":"49e0e468858d6d318e55ec637f5e3ff671028974","modified":1490878555852},{"_id":"public/tags/深入浅出nodejs/index.html","hash":"5171764e5a65253f0b3961c86899166fd6461279","modified":1490878555852},{"_id":"public/tags/reactjs/index.html","hash":"65fea88f126330d1091545162f71718caab3cf2e","modified":1490878555852},{"_id":"public/tags/公告/index.html","hash":"5962f082224dc399d826a763cbd467d4c398e4a5","modified":1490878555859},{"_id":"public/fonts/default-skin.b257fa.svg","hash":"2ac727c9e092331d35cce95af209ccfac6d4c7c7","modified":1490878555859},{"_id":"public/fonts/iconfont.59e68b.eot","hash":"b7f28dc802d6e32281e8fe7930d4dd2022d00717","modified":1490878555859},{"_id":"public/fonts/iconfont.b7ae25.ttf","hash":"697449e7790edd12e208706ecaa8d5d0eed44cde","modified":1490878555859},{"_id":"public/fonts/iconfont.ca3627.woff","hash":"cda0ea1dc25dc3d329d7637afe2cd6aec37e351b","modified":1490878555859},{"_id":"public/fonts/tooltip.4004ff.svg","hash":"397fe4b1093bf9b62457dac48aa15dac06b54a3c","modified":1490878555859},{"_id":"public/fonts/iconfont.dba24b.svg","hash":"f6c8d119c14f2124f4362acd6c8e00f209af5613","modified":1490878555859},{"_id":"public/img/default-skin.png","hash":"ed95a8e40a2c3478c5915376acb8e5f33677f24d","modified":1490878555859},{"_id":"public/img/preloader.gif","hash":"6342367c93c82da1b9c620e97c84a389cc43d96d","modified":1490878555859},{"_id":"public/img/scrollbar_arrow.png","hash":"d64a33c4ddfbdb89deeb6f4e3d36eb84dc4777c0","modified":1490878555859},{"_id":"public/img/ReduxFlow.png","hash":"a3c62d2d79510ce6216de272d10db1f2b959da32","modified":1490878555863},{"_id":"public/mobile.d238ee.js","hash":"a054884092af1cc5c2c14e5e11a4dac6d9254481","modified":1490878555869},{"_id":"public/slider.885efe.js","hash":"1f1a6548c6016cc132bf65a1701cc8421a1f8414","modified":1490878555869},{"_id":"public/main.2d7529.css","hash":"2eef112e365f9b00664302ba98b517662c75d411","modified":1490878555869},{"_id":"public/main.2d7529.js","hash":"988c141a741441812bcf4c408ef530d7a01522f3","modified":1490878555869},{"_id":"public/nodejs-深入浅出.pdf","hash":"36f3db49029a48c1dd4cd5101c18aca0b67c7132","modified":1490878556097},{"_id":"public/nodejs-了不起.pdf","hash":"f3d0219f298f0e7a0cd4d919ecae740dd9ac8dd0","modified":1490878556133}],"Category":[{"name":"nodejs","_id":"cj0weljc70003kccdgh1a1qkn"},{"name":"reactjs","_id":"cj0weljce0006kccd98qqoz7j"},{"name":"公告","_id":"cj0weljcg0009kccd0i3kjrdy"}],"Data":[],"Page":[{"title":"archive","date":"2017-03-26T09:42:00.000Z","_content":"","source":"archive/index.md","raw":"---\ntitle: archive\ndate: 2017-03-26 17:42:00\n---\n","updated":"2017-03-26T09:43:02.000Z","path":"archive/index.html","comments":1,"layout":"page","_id":"cj0weljc30001kccd0pqnw6oc","content":"","excerpt":"","more":""}],"Post":[{"title":"node线分享课程计划","date":"2017-03-21T11:11:05.000Z","_content":"## node线分享书籍\n1. **《了不起的nodejs》**：分10个课时\n2. **《深入浅出nodejs》**：分10个课时\n\n## 课程表\n\n### 《了不起的nodejs》  [PDF版本](http://192.168.0.111/pinganfu/h5/doc/sample/books/了不起的Nodejs_完整版.pdf)\n\n\n| 课时章节       |  日期         |  讲师  |\n| ------------- |:-------------:| -----:|\n|  1. 基础知识 |   | 陈宇 |\n|  2. CLI   |   | 倪敏 |\n|  3. TCP HTTP  |   | 徐佳 |\n|  4. Connect & Express   |   | 林宇宏 |\n|  5. 数据库   |   | 林宇宏 |\n|  6. Redis   |   | 倪敏 |\n|  7. 测试   |   | 陈宇 |\n\n\n### 《深入浅出nodejs》  [PDF版本](http://192.168.0.111/pinganfu/h5/doc/sample/books/深入浅出Node.js.pdf)\n\n| 课时章节       |  日期         |  讲师  |\n| ------------- |:-------------:| -----:|\n|  1. Chap1 - Chap2 Node简介及模块  |   | 徐佳 |\n|  2. Chap3 - Chap4 异步IO/异步编程  |   | 倪敏 |\n|  3. Chap5 内存管理  |   | 周显风 |\n|  4. Chap6 理解Buffer  |   | 林宇宏 |\n|  5. Chap7 网络编程　  |   | 陈宇 |\n|  6. Chap8 构建Web应用　  |   | 徐佳 |\n|  7. Chap9 玩转进程  |   | 徐佳 |\n|  8. Chap10 测试  |   | 徐佳 |\n|  9. Chap10 产品化　  |   | 徐佳 |\n|  10. 附录功能-调试Node\\Node编码规范　  |   | 徐佳 |\n","source":"_posts/nodejs-2017-03-21-schedule.md","raw":"---\ntitle: node线分享课程计划\ndate: 2017-03-21 19:11:05\ntags:\n  - nodejs\n  - 了不起的nodejs\n  - 深入浅出nodejs\ncategories:\n  - nodejs\n---\n## node线分享书籍\n1. **《了不起的nodejs》**：分10个课时\n2. **《深入浅出nodejs》**：分10个课时\n\n## 课程表\n\n### 《了不起的nodejs》  [PDF版本](http://192.168.0.111/pinganfu/h5/doc/sample/books/了不起的Nodejs_完整版.pdf)\n\n\n| 课时章节       |  日期         |  讲师  |\n| ------------- |:-------------:| -----:|\n|  1. 基础知识 |   | 陈宇 |\n|  2. CLI   |   | 倪敏 |\n|  3. TCP HTTP  |   | 徐佳 |\n|  4. Connect & Express   |   | 林宇宏 |\n|  5. 数据库   |   | 林宇宏 |\n|  6. Redis   |   | 倪敏 |\n|  7. 测试   |   | 陈宇 |\n\n\n### 《深入浅出nodejs》  [PDF版本](http://192.168.0.111/pinganfu/h5/doc/sample/books/深入浅出Node.js.pdf)\n\n| 课时章节       |  日期         |  讲师  |\n| ------------- |:-------------:| -----:|\n|  1. Chap1 - Chap2 Node简介及模块  |   | 徐佳 |\n|  2. Chap3 - Chap4 异步IO/异步编程  |   | 倪敏 |\n|  3. Chap5 内存管理  |   | 周显风 |\n|  4. Chap6 理解Buffer  |   | 林宇宏 |\n|  5. Chap7 网络编程　  |   | 陈宇 |\n|  6. Chap8 构建Web应用　  |   | 徐佳 |\n|  7. Chap9 玩转进程  |   | 徐佳 |\n|  8. Chap10 测试  |   | 徐佳 |\n|  9. Chap10 产品化　  |   | 徐佳 |\n|  10. 附录功能-调试Node\\Node编码规范　  |   | 徐佳 |\n","slug":"nodejs-2017-03-21-schedule","published":1,"updated":"2017-03-30T13:21:32.000Z","_id":"cj0weljby0000kccdu7vmd94t","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"node线分享书籍\"><a href=\"#node线分享书籍\" class=\"headerlink\" title=\"node线分享书籍\"></a>node线分享书籍</h2><ol>\n<li><strong>《了不起的nodejs》</strong>：分10个课时</li>\n<li><strong>《深入浅出nodejs》</strong>：分10个课时</li>\n</ol>\n<h2 id=\"课程表\"><a href=\"#课程表\" class=\"headerlink\" title=\"课程表\"></a>课程表</h2><h3 id=\"《了不起的nodejs》-PDF版本\"><a href=\"#《了不起的nodejs》-PDF版本\" class=\"headerlink\" title=\"《了不起的nodejs》  PDF版本\"></a>《了不起的nodejs》  <a href=\"http://192.168.0.111/pinganfu/h5/doc/sample/books/了不起的Nodejs_完整版.pdf\" target=\"_blank\" rel=\"external\">PDF版本</a></h3><table>\n<thead>\n<tr>\n<th>课时章节</th>\n<th style=\"text-align:center\">日期</th>\n<th style=\"text-align:right\">讲师</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1. 基础知识</td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:right\">陈宇</td>\n</tr>\n<tr>\n<td>2. CLI</td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:right\">倪敏</td>\n</tr>\n<tr>\n<td>3. TCP HTTP</td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:right\">徐佳</td>\n</tr>\n<tr>\n<td>4. Connect &amp; Express</td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:right\">林宇宏</td>\n</tr>\n<tr>\n<td>5. 数据库</td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:right\">林宇宏</td>\n</tr>\n<tr>\n<td>6. Redis</td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:right\">倪敏</td>\n</tr>\n<tr>\n<td>7. 测试</td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:right\">陈宇</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"《深入浅出nodejs》-PDF版本\"><a href=\"#《深入浅出nodejs》-PDF版本\" class=\"headerlink\" title=\"《深入浅出nodejs》  PDF版本\"></a>《深入浅出nodejs》  <a href=\"http://192.168.0.111/pinganfu/h5/doc/sample/books/深入浅出Node.js.pdf\" target=\"_blank\" rel=\"external\">PDF版本</a></h3><table>\n<thead>\n<tr>\n<th>课时章节</th>\n<th style=\"text-align:center\">日期</th>\n<th style=\"text-align:right\">讲师</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1. Chap1 - Chap2 Node简介及模块</td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:right\">徐佳</td>\n</tr>\n<tr>\n<td>2. Chap3 - Chap4 异步IO/异步编程</td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:right\">倪敏</td>\n</tr>\n<tr>\n<td>3. Chap5 内存管理</td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:right\">周显风</td>\n</tr>\n<tr>\n<td>4. Chap6 理解Buffer</td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:right\">林宇宏</td>\n</tr>\n<tr>\n<td>5. Chap7 网络编程　</td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:right\">陈宇</td>\n</tr>\n<tr>\n<td>6. Chap8 构建Web应用　</td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:right\">徐佳</td>\n</tr>\n<tr>\n<td>7. Chap9 玩转进程</td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:right\">徐佳</td>\n</tr>\n<tr>\n<td>8. Chap10 测试</td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:right\">徐佳</td>\n</tr>\n<tr>\n<td>9. Chap10 产品化　</td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:right\">徐佳</td>\n</tr>\n<tr>\n<td>10. 附录功能-调试Node\\Node编码规范　</td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:right\">徐佳</td>\n</tr>\n</tbody>\n</table>\n","excerpt":"","more":"<h2 id=\"node线分享书籍\"><a href=\"#node线分享书籍\" class=\"headerlink\" title=\"node线分享书籍\"></a>node线分享书籍</h2><ol>\n<li><strong>《了不起的nodejs》</strong>：分10个课时</li>\n<li><strong>《深入浅出nodejs》</strong>：分10个课时</li>\n</ol>\n<h2 id=\"课程表\"><a href=\"#课程表\" class=\"headerlink\" title=\"课程表\"></a>课程表</h2><h3 id=\"《了不起的nodejs》-PDF版本\"><a href=\"#《了不起的nodejs》-PDF版本\" class=\"headerlink\" title=\"《了不起的nodejs》  PDF版本\"></a>《了不起的nodejs》  <a href=\"http://192.168.0.111/pinganfu/h5/doc/sample/books/了不起的Nodejs_完整版.pdf\">PDF版本</a></h3><table>\n<thead>\n<tr>\n<th>课时章节</th>\n<th style=\"text-align:center\">日期</th>\n<th style=\"text-align:right\">讲师</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1. 基础知识</td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:right\">陈宇</td>\n</tr>\n<tr>\n<td>2. CLI</td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:right\">倪敏</td>\n</tr>\n<tr>\n<td>3. TCP HTTP</td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:right\">徐佳</td>\n</tr>\n<tr>\n<td>4. Connect &amp; Express</td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:right\">林宇宏</td>\n</tr>\n<tr>\n<td>5. 数据库</td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:right\">林宇宏</td>\n</tr>\n<tr>\n<td>6. Redis</td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:right\">倪敏</td>\n</tr>\n<tr>\n<td>7. 测试</td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:right\">陈宇</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"《深入浅出nodejs》-PDF版本\"><a href=\"#《深入浅出nodejs》-PDF版本\" class=\"headerlink\" title=\"《深入浅出nodejs》  PDF版本\"></a>《深入浅出nodejs》  <a href=\"http://192.168.0.111/pinganfu/h5/doc/sample/books/深入浅出Node.js.pdf\">PDF版本</a></h3><table>\n<thead>\n<tr>\n<th>课时章节</th>\n<th style=\"text-align:center\">日期</th>\n<th style=\"text-align:right\">讲师</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1. Chap1 - Chap2 Node简介及模块</td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:right\">徐佳</td>\n</tr>\n<tr>\n<td>2. Chap3 - Chap4 异步IO/异步编程</td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:right\">倪敏</td>\n</tr>\n<tr>\n<td>3. Chap5 内存管理</td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:right\">周显风</td>\n</tr>\n<tr>\n<td>4. Chap6 理解Buffer</td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:right\">林宇宏</td>\n</tr>\n<tr>\n<td>5. Chap7 网络编程　</td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:right\">陈宇</td>\n</tr>\n<tr>\n<td>6. Chap8 构建Web应用　</td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:right\">徐佳</td>\n</tr>\n<tr>\n<td>7. Chap9 玩转进程</td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:right\">徐佳</td>\n</tr>\n<tr>\n<td>8. Chap10 测试</td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:right\">徐佳</td>\n</tr>\n<tr>\n<td>9. Chap10 产品化　</td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:right\">徐佳</td>\n</tr>\n<tr>\n<td>10. 附录功能-调试Node\\Node编码规范　</td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:right\">徐佳</td>\n</tr>\n</tbody>\n</table>\n"},{"title":"redux","layout":"fasle","date":"2017-03-28T10:06:37.000Z","updated":"2017-03-30T11:34:38.000Z","comments":1,"_content":"\n## 推荐文档\n\n1. redux 生态系统:http://cn.redux.js.org/docs/introduction/Ecosystem.html\n1. 中文官方文档: http://cn.redux.js.org/index.html\n2. 英文官方文档: http://redux.js.org/\n3. github精简教程: https://github.com/react-guide/redux-tutorial-cn#redux-tutorial\n\n## 什么是redux\n1. 随着 JavaScript 单页应用开发日趋复杂，JavaScript 需要管理比任何时候都要多的 state （状态）。\n2. 通过限制更新发生的时间和方式，Redux 试图让 state 的变化变得可预测。\n\n3. Redux是JS状态容器.提供可预测化的状态管理. \n\n\n## 三大原则\n\n1. 单一数据源\n    * 整个应用的 state 被储存在一棵 object tree 中，并且这个 object tree 只存在于唯一一个 store 中。\n\n2. State 是只读的\n    * 惟一改变 state 的方法就是触发 action，action 是一个用于描述已发生事件的普通对象。\n    \n3. 使用纯函数来执行修改\n    * 为了描述 action 如何改变 state tree ，你需要编写 reducers。\n    \n    \n## 现实案例\n公司项目代码trunk管理\n\n|...|对应关系| 职责|\n|:---:|:---:|:---:|\n|我们|action |表达修改trunk   代码的意图|\n|双星级想出来的修改的方法|reducers |改变公司代码|\n|双星级 |combine reducer |reducers集合|\n|trunk |store |存储公司代码状态的地方|\n\n\n\n\n\n## Action \n\n* 表达我们修改store的意图\n* 只是描述了有事情发生了这一事实，并没有指明应用如何更新 state\n*   store 数据的唯一来源\n*   一般来说你会通过 store.dispatch() 将 action 传到 store    \n* Action 创建函数\n    * 在 Redux 中的 action 创建函数只是简单的返回一个 action\n```javascript\nfunction addTodo(text) {\n  return {\n    type: ADD_TODO,\n    text\n  }\n}\n```\nAction.js\n```javascript\n/*\n * action 类型\n */\n\nexport const ADD_TODO = 'ADD_TODO';\nexport const TOGGLE_TODO = 'TOGGLE_TODO'\nexport const SET_VISIBILITY_FILTER = 'SET_VISIBILITY_FILTER'\n\n/*\n * 其它的常量\n */\n\nexport const VisibilityFilters = {\n  SHOW_ALL: 'SHOW_ALL',\n  SHOW_COMPLETED: 'SHOW_COMPLETED',\n  SHOW_ACTIVE: 'SHOW_ACTIVE'\n}\n\n/*\n * action 创建函数\n */\n\nexport function addTodo(text) {\n  return { type: ADD_TODO, text }\n}\n\nexport function toggleTodo(index) {\n  return { type: TOGGLE_TODO, index }\n}\n\nexport function setVisibilityFilter(filter) {\n  return { type: SET_VISIBILITY_FILTER, filter }\n}\n```\n\n## Reducer \n* Action 只是描述了有事情发生了这一事实，并没有指明应用如何更新 state。而这正是 reducer 要做的事情。\n* Action 处理\n    * reducer 就是一个纯函数，接收旧的 state 和 action，返回新的 state。\n* 不要直接修改 state。 使用 Object.assign() 新建了一个副本。不能这样使用 Object.assign(state, { visibilityFilter: action.filter })，因为它会改变第一个参数的值。你必须把第一个参数设置为空对象。你也可以开启对ES7提案对象展开运算符的支持, 从而使用 { ...state, ...newState } 达到相同的目的。\n  \n* 在 default 情况下返回旧的 state。遇到未知的 action 时，一定要返回旧的 state。\n* 在写reducer时候,注意store的数据结构\n\n## 纯函数 \n* 纯函数是指 不依赖于且不改变它作用域之外的变量状态的函数。\n* 也就是说， 纯函数的返回值只由它调用时的参数决定 ，它的执行不依赖于系统的状态（比如：何时、何处调用它）。\n\n\n\n![](/img/ReduxFlow.png)\n\n#### connect([mapStateToProps], [mapDispatchToProps], [mergeProps], [options])\n\n#### [mapStateToProps(state, [ownProps]): stateProps]\n\n* (Function): 如果定义该参数，组件将会监听 Redux store 的变化。任何时候，只要 Redux store 发生改变，mapStateToProps 函数就会被调用。\n* 该回调函数必须返回一个纯对象，这个对象会与组件的 props 合并。\n* 如果你省略了这个参数，你的组件将不会监听 Redux store。\n* 如果指定了该回调函数中的第二个参数 ownProps，则该参数的值为传递到组件的 props，而且只要组件接收到新的 props，mapStateToProps 也会被调用（例如，当 props 接收到来自父组件一个小小的改动，那么你所使用的 ownProps 参数，mapStateToProps 都会被重新计算）。\n\n#### [mapDispatchToProps(dispatch, [ownProps]): dispatchProps] \n* (Object or Function): 如果传递的是一个对象，那么每个定义在该对象的函数都将被当作 Redux action creator，而且这个对象会与 Redux store 绑定在一起，其中所定义的方法名将作为属性名，合并到组件的 props 中。\n* 如果传递的是一个函数，该函数将接收一个 dispatch 函数，然后由你来决定如何返回一个对象，这个对象通过 dispatch 函数与 action creator 以某种方式绑定在一起（提示：你也许会用到 Redux 的辅助函数 bindActionCreators()）。\n* 如果你省略这个 mapDispatchToProps 参数，默认情况下，dispatch 会注入到你的组件 props 中。\n* 如果指定了该回调函数中第二个参数 ownProps，该参数的值为传递到组件的 props，而且只要组件接收到新 props，mapDispatchToProps 也会被调用。\n     \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/reactjs-2017-03-28-redux.md","raw":"---\ntitle: redux\nlayout: fasle\ndate: 2017-03-28 18:06:37\ntags: \n- reactjs\ncategories: \n- reactjs\nupdated:\ncomments:\n---\n\n## 推荐文档\n\n1. redux 生态系统:http://cn.redux.js.org/docs/introduction/Ecosystem.html\n1. 中文官方文档: http://cn.redux.js.org/index.html\n2. 英文官方文档: http://redux.js.org/\n3. github精简教程: https://github.com/react-guide/redux-tutorial-cn#redux-tutorial\n\n## 什么是redux\n1. 随着 JavaScript 单页应用开发日趋复杂，JavaScript 需要管理比任何时候都要多的 state （状态）。\n2. 通过限制更新发生的时间和方式，Redux 试图让 state 的变化变得可预测。\n\n3. Redux是JS状态容器.提供可预测化的状态管理. \n\n\n## 三大原则\n\n1. 单一数据源\n    * 整个应用的 state 被储存在一棵 object tree 中，并且这个 object tree 只存在于唯一一个 store 中。\n\n2. State 是只读的\n    * 惟一改变 state 的方法就是触发 action，action 是一个用于描述已发生事件的普通对象。\n    \n3. 使用纯函数来执行修改\n    * 为了描述 action 如何改变 state tree ，你需要编写 reducers。\n    \n    \n## 现实案例\n公司项目代码trunk管理\n\n|...|对应关系| 职责|\n|:---:|:---:|:---:|\n|我们|action |表达修改trunk   代码的意图|\n|双星级想出来的修改的方法|reducers |改变公司代码|\n|双星级 |combine reducer |reducers集合|\n|trunk |store |存储公司代码状态的地方|\n\n\n\n\n\n## Action \n\n* 表达我们修改store的意图\n* 只是描述了有事情发生了这一事实，并没有指明应用如何更新 state\n*   store 数据的唯一来源\n*   一般来说你会通过 store.dispatch() 将 action 传到 store    \n* Action 创建函数\n    * 在 Redux 中的 action 创建函数只是简单的返回一个 action\n```javascript\nfunction addTodo(text) {\n  return {\n    type: ADD_TODO,\n    text\n  }\n}\n```\nAction.js\n```javascript\n/*\n * action 类型\n */\n\nexport const ADD_TODO = 'ADD_TODO';\nexport const TOGGLE_TODO = 'TOGGLE_TODO'\nexport const SET_VISIBILITY_FILTER = 'SET_VISIBILITY_FILTER'\n\n/*\n * 其它的常量\n */\n\nexport const VisibilityFilters = {\n  SHOW_ALL: 'SHOW_ALL',\n  SHOW_COMPLETED: 'SHOW_COMPLETED',\n  SHOW_ACTIVE: 'SHOW_ACTIVE'\n}\n\n/*\n * action 创建函数\n */\n\nexport function addTodo(text) {\n  return { type: ADD_TODO, text }\n}\n\nexport function toggleTodo(index) {\n  return { type: TOGGLE_TODO, index }\n}\n\nexport function setVisibilityFilter(filter) {\n  return { type: SET_VISIBILITY_FILTER, filter }\n}\n```\n\n## Reducer \n* Action 只是描述了有事情发生了这一事实，并没有指明应用如何更新 state。而这正是 reducer 要做的事情。\n* Action 处理\n    * reducer 就是一个纯函数，接收旧的 state 和 action，返回新的 state。\n* 不要直接修改 state。 使用 Object.assign() 新建了一个副本。不能这样使用 Object.assign(state, { visibilityFilter: action.filter })，因为它会改变第一个参数的值。你必须把第一个参数设置为空对象。你也可以开启对ES7提案对象展开运算符的支持, 从而使用 { ...state, ...newState } 达到相同的目的。\n  \n* 在 default 情况下返回旧的 state。遇到未知的 action 时，一定要返回旧的 state。\n* 在写reducer时候,注意store的数据结构\n\n## 纯函数 \n* 纯函数是指 不依赖于且不改变它作用域之外的变量状态的函数。\n* 也就是说， 纯函数的返回值只由它调用时的参数决定 ，它的执行不依赖于系统的状态（比如：何时、何处调用它）。\n\n\n\n![](/img/ReduxFlow.png)\n\n#### connect([mapStateToProps], [mapDispatchToProps], [mergeProps], [options])\n\n#### [mapStateToProps(state, [ownProps]): stateProps]\n\n* (Function): 如果定义该参数，组件将会监听 Redux store 的变化。任何时候，只要 Redux store 发生改变，mapStateToProps 函数就会被调用。\n* 该回调函数必须返回一个纯对象，这个对象会与组件的 props 合并。\n* 如果你省略了这个参数，你的组件将不会监听 Redux store。\n* 如果指定了该回调函数中的第二个参数 ownProps，则该参数的值为传递到组件的 props，而且只要组件接收到新的 props，mapStateToProps 也会被调用（例如，当 props 接收到来自父组件一个小小的改动，那么你所使用的 ownProps 参数，mapStateToProps 都会被重新计算）。\n\n#### [mapDispatchToProps(dispatch, [ownProps]): dispatchProps] \n* (Object or Function): 如果传递的是一个对象，那么每个定义在该对象的函数都将被当作 Redux action creator，而且这个对象会与 Redux store 绑定在一起，其中所定义的方法名将作为属性名，合并到组件的 props 中。\n* 如果传递的是一个函数，该函数将接收一个 dispatch 函数，然后由你来决定如何返回一个对象，这个对象通过 dispatch 函数与 action creator 以某种方式绑定在一起（提示：你也许会用到 Redux 的辅助函数 bindActionCreators()）。\n* 如果你省略这个 mapDispatchToProps 参数，默认情况下，dispatch 会注入到你的组件 props 中。\n* 如果指定了该回调函数中第二个参数 ownProps，该参数的值为传递到组件的 props，而且只要组件接收到新 props，mapDispatchToProps 也会被调用。\n     \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","slug":"reactjs-2017-03-28-redux","published":1,"photos":[],"link":"","_id":"cj0weljc40002kccdellcbszn","content":"<h2 id=\"推荐文档\"><a href=\"#推荐文档\" class=\"headerlink\" title=\"推荐文档\"></a>推荐文档</h2><ol>\n<li>redux 生态系统:<a href=\"http://cn.redux.js.org/docs/introduction/Ecosystem.html\" target=\"_blank\" rel=\"external\">http://cn.redux.js.org/docs/introduction/Ecosystem.html</a></li>\n<li>中文官方文档: <a href=\"http://cn.redux.js.org/index.html\" target=\"_blank\" rel=\"external\">http://cn.redux.js.org/index.html</a></li>\n<li>英文官方文档: <a href=\"http://redux.js.org/\" target=\"_blank\" rel=\"external\">http://redux.js.org/</a></li>\n<li>github精简教程: <a href=\"https://github.com/react-guide/redux-tutorial-cn#redux-tutorial\" target=\"_blank\" rel=\"external\">https://github.com/react-guide/redux-tutorial-cn#redux-tutorial</a></li>\n</ol>\n<h2 id=\"什么是redux\"><a href=\"#什么是redux\" class=\"headerlink\" title=\"什么是redux\"></a>什么是redux</h2><ol>\n<li>随着 JavaScript 单页应用开发日趋复杂，JavaScript 需要管理比任何时候都要多的 state （状态）。</li>\n<li><p>通过限制更新发生的时间和方式，Redux 试图让 state 的变化变得可预测。</p>\n</li>\n<li><p>Redux是JS状态容器.提供可预测化的状态管理. </p>\n</li>\n</ol>\n<h2 id=\"三大原则\"><a href=\"#三大原则\" class=\"headerlink\" title=\"三大原则\"></a>三大原则</h2><ol>\n<li><p>单一数据源</p>\n<ul>\n<li>整个应用的 state 被储存在一棵 object tree 中，并且这个 object tree 只存在于唯一一个 store 中。</li>\n</ul>\n</li>\n<li><p>State 是只读的</p>\n<ul>\n<li>惟一改变 state 的方法就是触发 action，action 是一个用于描述已发生事件的普通对象。</li>\n</ul>\n</li>\n<li><p>使用纯函数来执行修改</p>\n<ul>\n<li>为了描述 action 如何改变 state tree ，你需要编写 reducers。</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"现实案例\"><a href=\"#现实案例\" class=\"headerlink\" title=\"现实案例\"></a>现实案例</h2><p>公司项目代码trunk管理</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">…</th>\n<th style=\"text-align:center\">对应关系</th>\n<th style=\"text-align:center\">职责</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">我们</td>\n<td style=\"text-align:center\">action</td>\n<td style=\"text-align:center\">表达修改trunk   代码的意图</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">双星级想出来的修改的方法</td>\n<td style=\"text-align:center\">reducers</td>\n<td style=\"text-align:center\">改变公司代码</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">双星级</td>\n<td style=\"text-align:center\">combine reducer</td>\n<td style=\"text-align:center\">reducers集合</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">trunk</td>\n<td style=\"text-align:center\">store</td>\n<td style=\"text-align:center\">存储公司代码状态的地方</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"Action\"><a href=\"#Action\" class=\"headerlink\" title=\"Action\"></a>Action</h2><ul>\n<li>表达我们修改store的意图</li>\n<li>只是描述了有事情发生了这一事实，并没有指明应用如何更新 state</li>\n<li>store 数据的唯一来源</li>\n<li>一般来说你会通过 store.dispatch() 将 action 传到 store    </li>\n<li>Action 创建函数<ul>\n<li>在 Redux 中的 action 创建函数只是简单的返回一个 action<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">addTodo</span>(<span class=\"params\">text</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> &#123;</div><div class=\"line\">    <span class=\"attr\">type</span>: ADD_TODO,</div><div class=\"line\">    text</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ul>\n<p>Action.js<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/*</span></div><div class=\"line\"> * action 类型</div><div class=\"line\"> */</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> ADD_TODO = <span class=\"string\">'ADD_TODO'</span>;</div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> TOGGLE_TODO = <span class=\"string\">'TOGGLE_TODO'</span></div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> SET_VISIBILITY_FILTER = <span class=\"string\">'SET_VISIBILITY_FILTER'</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/*</span></div><div class=\"line\"> * 其它的常量</div><div class=\"line\"> */</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> VisibilityFilters = &#123;</div><div class=\"line\">  <span class=\"attr\">SHOW_ALL</span>: <span class=\"string\">'SHOW_ALL'</span>,</div><div class=\"line\">  <span class=\"attr\">SHOW_COMPLETED</span>: <span class=\"string\">'SHOW_COMPLETED'</span>,</div><div class=\"line\">  <span class=\"attr\">SHOW_ACTIVE</span>: <span class=\"string\">'SHOW_ACTIVE'</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/*</span></div><div class=\"line\"> * action 创建函数</div><div class=\"line\"> */</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">addTodo</span>(<span class=\"params\">text</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> &#123; <span class=\"attr\">type</span>: ADD_TODO, text &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">toggleTodo</span>(<span class=\"params\">index</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> &#123; <span class=\"attr\">type</span>: TOGGLE_TODO, index &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">setVisibilityFilter</span>(<span class=\"params\">filter</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> &#123; <span class=\"attr\">type</span>: SET_VISIBILITY_FILTER, filter &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h2 id=\"Reducer\"><a href=\"#Reducer\" class=\"headerlink\" title=\"Reducer\"></a>Reducer</h2><ul>\n<li>Action 只是描述了有事情发生了这一事实，并没有指明应用如何更新 state。而这正是 reducer 要做的事情。</li>\n<li>Action 处理<ul>\n<li>reducer 就是一个纯函数，接收旧的 state 和 action，返回新的 state。</li>\n</ul>\n</li>\n<li><p>不要直接修改 state。 使用 Object.assign() 新建了一个副本。不能这样使用 Object.assign(state, { visibilityFilter: action.filter })，因为它会改变第一个参数的值。你必须把第一个参数设置为空对象。你也可以开启对ES7提案对象展开运算符的支持, 从而使用 { …state, …newState } 达到相同的目的。</p>\n</li>\n<li><p>在 default 情况下返回旧的 state。遇到未知的 action 时，一定要返回旧的 state。</p>\n</li>\n<li>在写reducer时候,注意store的数据结构</li>\n</ul>\n<h2 id=\"纯函数\"><a href=\"#纯函数\" class=\"headerlink\" title=\"纯函数\"></a>纯函数</h2><ul>\n<li>纯函数是指 不依赖于且不改变它作用域之外的变量状态的函数。</li>\n<li>也就是说， 纯函数的返回值只由它调用时的参数决定 ，它的执行不依赖于系统的状态（比如：何时、何处调用它）。</li>\n</ul>\n<p><img src=\"/img/ReduxFlow.png\" alt=\"\"></p>\n<h4 id=\"connect-mapStateToProps-mapDispatchToProps-mergeProps-options\"><a href=\"#connect-mapStateToProps-mapDispatchToProps-mergeProps-options\" class=\"headerlink\" title=\"connect([mapStateToProps], [mapDispatchToProps], [mergeProps], [options])\"></a>connect([mapStateToProps], [mapDispatchToProps], [mergeProps], [options])</h4><h4 id=\"mapStateToProps-state-ownProps-stateProps\"><a href=\"#mapStateToProps-state-ownProps-stateProps\" class=\"headerlink\" title=\"[mapStateToProps(state, [ownProps]): stateProps]\"></a>[mapStateToProps(state, [ownProps]): stateProps]</h4><ul>\n<li>(Function): 如果定义该参数，组件将会监听 Redux store 的变化。任何时候，只要 Redux store 发生改变，mapStateToProps 函数就会被调用。</li>\n<li>该回调函数必须返回一个纯对象，这个对象会与组件的 props 合并。</li>\n<li>如果你省略了这个参数，你的组件将不会监听 Redux store。</li>\n<li>如果指定了该回调函数中的第二个参数 ownProps，则该参数的值为传递到组件的 props，而且只要组件接收到新的 props，mapStateToProps 也会被调用（例如，当 props 接收到来自父组件一个小小的改动，那么你所使用的 ownProps 参数，mapStateToProps 都会被重新计算）。</li>\n</ul>\n<h4 id=\"mapDispatchToProps-dispatch-ownProps-dispatchProps\"><a href=\"#mapDispatchToProps-dispatch-ownProps-dispatchProps\" class=\"headerlink\" title=\"[mapDispatchToProps(dispatch, [ownProps]): dispatchProps]\"></a>[mapDispatchToProps(dispatch, [ownProps]): dispatchProps]</h4><ul>\n<li>(Object or Function): 如果传递的是一个对象，那么每个定义在该对象的函数都将被当作 Redux action creator，而且这个对象会与 Redux store 绑定在一起，其中所定义的方法名将作为属性名，合并到组件的 props 中。</li>\n<li>如果传递的是一个函数，该函数将接收一个 dispatch 函数，然后由你来决定如何返回一个对象，这个对象通过 dispatch 函数与 action creator 以某种方式绑定在一起（提示：你也许会用到 Redux 的辅助函数 bindActionCreators()）。</li>\n<li>如果你省略这个 mapDispatchToProps 参数，默认情况下，dispatch 会注入到你的组件 props 中。</li>\n<li>如果指定了该回调函数中第二个参数 ownProps，该参数的值为传递到组件的 props，而且只要组件接收到新 props，mapDispatchToProps 也会被调用。</li>\n</ul>\n","excerpt":"","more":"<h2 id=\"推荐文档\"><a href=\"#推荐文档\" class=\"headerlink\" title=\"推荐文档\"></a>推荐文档</h2><ol>\n<li>redux 生态系统:<a href=\"http://cn.redux.js.org/docs/introduction/Ecosystem.html\">http://cn.redux.js.org/docs/introduction/Ecosystem.html</a></li>\n<li>中文官方文档: <a href=\"http://cn.redux.js.org/index.html\">http://cn.redux.js.org/index.html</a></li>\n<li>英文官方文档: <a href=\"http://redux.js.org/\">http://redux.js.org/</a></li>\n<li>github精简教程: <a href=\"https://github.com/react-guide/redux-tutorial-cn#redux-tutorial\">https://github.com/react-guide/redux-tutorial-cn#redux-tutorial</a></li>\n</ol>\n<h2 id=\"什么是redux\"><a href=\"#什么是redux\" class=\"headerlink\" title=\"什么是redux\"></a>什么是redux</h2><ol>\n<li>随着 JavaScript 单页应用开发日趋复杂，JavaScript 需要管理比任何时候都要多的 state （状态）。</li>\n<li><p>通过限制更新发生的时间和方式，Redux 试图让 state 的变化变得可预测。</p>\n</li>\n<li><p>Redux是JS状态容器.提供可预测化的状态管理. </p>\n</li>\n</ol>\n<h2 id=\"三大原则\"><a href=\"#三大原则\" class=\"headerlink\" title=\"三大原则\"></a>三大原则</h2><ol>\n<li><p>单一数据源</p>\n<ul>\n<li>整个应用的 state 被储存在一棵 object tree 中，并且这个 object tree 只存在于唯一一个 store 中。</li>\n</ul>\n</li>\n<li><p>State 是只读的</p>\n<ul>\n<li>惟一改变 state 的方法就是触发 action，action 是一个用于描述已发生事件的普通对象。</li>\n</ul>\n</li>\n<li><p>使用纯函数来执行修改</p>\n<ul>\n<li>为了描述 action 如何改变 state tree ，你需要编写 reducers。</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"现实案例\"><a href=\"#现实案例\" class=\"headerlink\" title=\"现实案例\"></a>现实案例</h2><p>公司项目代码trunk管理</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">…</th>\n<th style=\"text-align:center\">对应关系</th>\n<th style=\"text-align:center\">职责</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">我们</td>\n<td style=\"text-align:center\">action</td>\n<td style=\"text-align:center\">表达修改trunk   代码的意图</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">双星级想出来的修改的方法</td>\n<td style=\"text-align:center\">reducers</td>\n<td style=\"text-align:center\">改变公司代码</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">双星级</td>\n<td style=\"text-align:center\">combine reducer</td>\n<td style=\"text-align:center\">reducers集合</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">trunk</td>\n<td style=\"text-align:center\">store</td>\n<td style=\"text-align:center\">存储公司代码状态的地方</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"Action\"><a href=\"#Action\" class=\"headerlink\" title=\"Action\"></a>Action</h2><ul>\n<li>表达我们修改store的意图</li>\n<li>只是描述了有事情发生了这一事实，并没有指明应用如何更新 state</li>\n<li>store 数据的唯一来源</li>\n<li>一般来说你会通过 store.dispatch() 将 action 传到 store    </li>\n<li>Action 创建函数<ul>\n<li>在 Redux 中的 action 创建函数只是简单的返回一个 action<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">addTodo</span>(<span class=\"params\">text</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> &#123;</div><div class=\"line\">    <span class=\"attr\">type</span>: ADD_TODO,</div><div class=\"line\">    text</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ul>\n<p>Action.js<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/*</div><div class=\"line\"> * action 类型</div><div class=\"line\"> */</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> ADD_TODO = <span class=\"string\">'ADD_TODO'</span>;</div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> TOGGLE_TODO = <span class=\"string\">'TOGGLE_TODO'</span></div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> SET_VISIBILITY_FILTER = <span class=\"string\">'SET_VISIBILITY_FILTER'</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/*</div><div class=\"line\"> * 其它的常量</div><div class=\"line\"> */</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> VisibilityFilters = &#123;</div><div class=\"line\">  <span class=\"attr\">SHOW_ALL</span>: <span class=\"string\">'SHOW_ALL'</span>,</div><div class=\"line\">  <span class=\"attr\">SHOW_COMPLETED</span>: <span class=\"string\">'SHOW_COMPLETED'</span>,</div><div class=\"line\">  <span class=\"attr\">SHOW_ACTIVE</span>: <span class=\"string\">'SHOW_ACTIVE'</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/*</div><div class=\"line\"> * action 创建函数</div><div class=\"line\"> */</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">addTodo</span>(<span class=\"params\">text</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> &#123; <span class=\"attr\">type</span>: ADD_TODO, text &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">toggleTodo</span>(<span class=\"params\">index</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> &#123; <span class=\"attr\">type</span>: TOGGLE_TODO, index &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">setVisibilityFilter</span>(<span class=\"params\">filter</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> &#123; <span class=\"attr\">type</span>: SET_VISIBILITY_FILTER, filter &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h2 id=\"Reducer\"><a href=\"#Reducer\" class=\"headerlink\" title=\"Reducer\"></a>Reducer</h2><ul>\n<li>Action 只是描述了有事情发生了这一事实，并没有指明应用如何更新 state。而这正是 reducer 要做的事情。</li>\n<li>Action 处理<ul>\n<li>reducer 就是一个纯函数，接收旧的 state 和 action，返回新的 state。</li>\n</ul>\n</li>\n<li><p>不要直接修改 state。 使用 Object.assign() 新建了一个副本。不能这样使用 Object.assign(state, { visibilityFilter: action.filter })，因为它会改变第一个参数的值。你必须把第一个参数设置为空对象。你也可以开启对ES7提案对象展开运算符的支持, 从而使用 { …state, …newState } 达到相同的目的。</p>\n</li>\n<li><p>在 default 情况下返回旧的 state。遇到未知的 action 时，一定要返回旧的 state。</p>\n</li>\n<li>在写reducer时候,注意store的数据结构</li>\n</ul>\n<h2 id=\"纯函数\"><a href=\"#纯函数\" class=\"headerlink\" title=\"纯函数\"></a>纯函数</h2><ul>\n<li>纯函数是指 不依赖于且不改变它作用域之外的变量状态的函数。</li>\n<li>也就是说， 纯函数的返回值只由它调用时的参数决定 ，它的执行不依赖于系统的状态（比如：何时、何处调用它）。</li>\n</ul>\n<p><img src=\"/img/ReduxFlow.png\" alt=\"\"></p>\n<h4 id=\"connect-mapStateToProps-mapDispatchToProps-mergeProps-options\"><a href=\"#connect-mapStateToProps-mapDispatchToProps-mergeProps-options\" class=\"headerlink\" title=\"connect([mapStateToProps], [mapDispatchToProps], [mergeProps], [options])\"></a>connect([mapStateToProps], [mapDispatchToProps], [mergeProps], [options])</h4><h4 id=\"mapStateToProps-state-ownProps-stateProps\"><a href=\"#mapStateToProps-state-ownProps-stateProps\" class=\"headerlink\" title=\"[mapStateToProps(state, [ownProps]): stateProps]\"></a>[mapStateToProps(state, [ownProps]): stateProps]</h4><ul>\n<li>(Function): 如果定义该参数，组件将会监听 Redux store 的变化。任何时候，只要 Redux store 发生改变，mapStateToProps 函数就会被调用。</li>\n<li>该回调函数必须返回一个纯对象，这个对象会与组件的 props 合并。</li>\n<li>如果你省略了这个参数，你的组件将不会监听 Redux store。</li>\n<li>如果指定了该回调函数中的第二个参数 ownProps，则该参数的值为传递到组件的 props，而且只要组件接收到新的 props，mapStateToProps 也会被调用（例如，当 props 接收到来自父组件一个小小的改动，那么你所使用的 ownProps 参数，mapStateToProps 都会被重新计算）。</li>\n</ul>\n<h4 id=\"mapDispatchToProps-dispatch-ownProps-dispatchProps\"><a href=\"#mapDispatchToProps-dispatch-ownProps-dispatchProps\" class=\"headerlink\" title=\"[mapDispatchToProps(dispatch, [ownProps]): dispatchProps]\"></a>[mapDispatchToProps(dispatch, [ownProps]): dispatchProps]</h4><ul>\n<li>(Object or Function): 如果传递的是一个对象，那么每个定义在该对象的函数都将被当作 Redux action creator，而且这个对象会与 Redux store 绑定在一起，其中所定义的方法名将作为属性名，合并到组件的 props 中。</li>\n<li>如果传递的是一个函数，该函数将接收一个 dispatch 函数，然后由你来决定如何返回一个对象，这个对象通过 dispatch 函数与 action creator 以某种方式绑定在一起（提示：你也许会用到 Redux 的辅助函数 bindActionCreators()）。</li>\n<li>如果你省略这个 mapDispatchToProps 参数，默认情况下，dispatch 会注入到你的组件 props 中。</li>\n<li>如果指定了该回调函数中第二个参数 ownProps，该参数的值为传递到组件的 props，而且只要组件接收到新 props，mapDispatchToProps 也会被调用。</li>\n</ul>\n"},{"title":"回归技术教程，做系列分享","date":"2017-03-26T09:10:09.000Z","_content":"### 背景：\n今年我和很多同学谈17年KPI的时候，发现很多同学都在说同一件事，就是想学习，想团队有一个持续的分享会，想有一个大牛来指导他们去学习。所以能看出来，大家都渴望新知识，都想团队有个持续的分享会。\n\n### 现状：\n目前分享会形式主要是‘散养’，大家自主选课题，自己感兴趣的主题分享，这种形式的分享有两个很大的困难\n1. 不固定，不持久，想来一发就一发。\n2. 主题与大家不match\n主讲在上面说，下面的同学用很渴望的眼神认真的听着，但就是听不懂。我一般一次分享会做完后，我都用问过其中的一些同学，没对主讲课题做一些基础的准备的话，绝大多数人都是这种情况。所以这种形式的分享最佳收益者是主讲人，对于听众效果应该不是最好的。\n所以年初来，我一直在考虑解决这个问题，能给大家一个固定又持久，不管对主讲还是对听众都有收获的分享会。\n\n正因为有目前分享会有这种问题，而且我们团队人越来越多啦，我相信团队对于这种分享技术的氛围会越来越强烈。所以我一直在想以哪种分享形式来解决这些问题。目前我有一些想法，也跟佳敏做了讨论，他还是肯定提倡我这种做法。所以我觉得是时候跟大家说下，看看大家的反馈。\n\n新分享会新主题增加：** “回归技术教程，做系列分享”**\n\n### 形式：\n引入学校上课形式，会以17年团队技术KPI的三块：** react框架、RN技术、node技术 **找三本经典教程，去买PDF版本，分发给大家。分享会根据制定出一个课程表，以章节作为一个课时，每周一节课来分享三本教程中的每一章内容。量不大吧？这样只要大家提前去看，带着每章的问题来听课，内容上跟讲师也能match上，可能效果会更好些。\n\n### 分享时间：\n 以课程表为准\n\n### 老师：\n每条线都以目前这三个技术方向的几个主要负责人来作为主讲老师，持续系列分享。当然我更希望是在坐的每位同学，提前看教程，自主提出当老师。我觉得大家都是从0基础开始，每个人都有资格来当老师，哪怕当老师犯了错，下面有经验的学生也会纠正，对你本人收益也是最大的。所以我提倡这种自主行为，为此我会设立讲师奖励。\n\n### 奖励：\n计划每个季度，对前三名讲师给予买书补贴（具体费用如下）。\n```\n一次/一季度的前三名次数讲师: (80+100+120) * 4个季度 = 1200\n一次/一季度的 Happy Time: 250 * 4 = 1000 ```\n\n分享博客站点： 1. 分享会讲师内容  2. 大家工作上或学习中的体会\n\n","source":"_posts/公告-2017-03-26-background.md","raw":"---\ntitle: 回归技术教程，做系列分享 \ndate: 2017-03-26 17:10:09\ntags:\n  - 公告\ncategories:\n  - 公告\n---\n### 背景：\n今年我和很多同学谈17年KPI的时候，发现很多同学都在说同一件事，就是想学习，想团队有一个持续的分享会，想有一个大牛来指导他们去学习。所以能看出来，大家都渴望新知识，都想团队有个持续的分享会。\n\n### 现状：\n目前分享会形式主要是‘散养’，大家自主选课题，自己感兴趣的主题分享，这种形式的分享有两个很大的困难\n1. 不固定，不持久，想来一发就一发。\n2. 主题与大家不match\n主讲在上面说，下面的同学用很渴望的眼神认真的听着，但就是听不懂。我一般一次分享会做完后，我都用问过其中的一些同学，没对主讲课题做一些基础的准备的话，绝大多数人都是这种情况。所以这种形式的分享最佳收益者是主讲人，对于听众效果应该不是最好的。\n所以年初来，我一直在考虑解决这个问题，能给大家一个固定又持久，不管对主讲还是对听众都有收获的分享会。\n\n正因为有目前分享会有这种问题，而且我们团队人越来越多啦，我相信团队对于这种分享技术的氛围会越来越强烈。所以我一直在想以哪种分享形式来解决这些问题。目前我有一些想法，也跟佳敏做了讨论，他还是肯定提倡我这种做法。所以我觉得是时候跟大家说下，看看大家的反馈。\n\n新分享会新主题增加：** “回归技术教程，做系列分享”**\n\n### 形式：\n引入学校上课形式，会以17年团队技术KPI的三块：** react框架、RN技术、node技术 **找三本经典教程，去买PDF版本，分发给大家。分享会根据制定出一个课程表，以章节作为一个课时，每周一节课来分享三本教程中的每一章内容。量不大吧？这样只要大家提前去看，带着每章的问题来听课，内容上跟讲师也能match上，可能效果会更好些。\n\n### 分享时间：\n 以课程表为准\n\n### 老师：\n每条线都以目前这三个技术方向的几个主要负责人来作为主讲老师，持续系列分享。当然我更希望是在坐的每位同学，提前看教程，自主提出当老师。我觉得大家都是从0基础开始，每个人都有资格来当老师，哪怕当老师犯了错，下面有经验的学生也会纠正，对你本人收益也是最大的。所以我提倡这种自主行为，为此我会设立讲师奖励。\n\n### 奖励：\n计划每个季度，对前三名讲师给予买书补贴（具体费用如下）。\n```\n一次/一季度的前三名次数讲师: (80+100+120) * 4个季度 = 1200\n一次/一季度的 Happy Time: 250 * 4 = 1000 ```\n\n分享博客站点： 1. 分享会讲师内容  2. 大家工作上或学习中的体会\n\n","slug":"公告-2017-03-26-background","published":1,"updated":"2017-03-30T11:22:48.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj0weljca0005kccdvggpi25h","content":"<h3 id=\"背景：\"><a href=\"#背景：\" class=\"headerlink\" title=\"背景：\"></a>背景：</h3><p>今年我和很多同学谈17年KPI的时候，发现很多同学都在说同一件事，就是想学习，想团队有一个持续的分享会，想有一个大牛来指导他们去学习。所以能看出来，大家都渴望新知识，都想团队有个持续的分享会。</p>\n<h3 id=\"现状：\"><a href=\"#现状：\" class=\"headerlink\" title=\"现状：\"></a>现状：</h3><p>目前分享会形式主要是‘散养’，大家自主选课题，自己感兴趣的主题分享，这种形式的分享有两个很大的困难</p>\n<ol>\n<li>不固定，不持久，想来一发就一发。</li>\n<li>主题与大家不match<br>主讲在上面说，下面的同学用很渴望的眼神认真的听着，但就是听不懂。我一般一次分享会做完后，我都用问过其中的一些同学，没对主讲课题做一些基础的准备的话，绝大多数人都是这种情况。所以这种形式的分享最佳收益者是主讲人，对于听众效果应该不是最好的。<br>所以年初来，我一直在考虑解决这个问题，能给大家一个固定又持久，不管对主讲还是对听众都有收获的分享会。</li>\n</ol>\n<p>正因为有目前分享会有这种问题，而且我们团队人越来越多啦，我相信团队对于这种分享技术的氛围会越来越强烈。所以我一直在想以哪种分享形式来解决这些问题。目前我有一些想法，也跟佳敏做了讨论，他还是肯定提倡我这种做法。所以我觉得是时候跟大家说下，看看大家的反馈。</p>\n<p>新分享会新主题增加：<strong> “回归技术教程，做系列分享”</strong></p>\n<h3 id=\"形式：\"><a href=\"#形式：\" class=\"headerlink\" title=\"形式：\"></a>形式：</h3><p>引入学校上课形式，会以17年团队技术KPI的三块：<strong> react框架、RN技术、node技术 </strong>找三本经典教程，去买PDF版本，分发给大家。分享会根据制定出一个课程表，以章节作为一个课时，每周一节课来分享三本教程中的每一章内容。量不大吧？这样只要大家提前去看，带着每章的问题来听课，内容上跟讲师也能match上，可能效果会更好些。</p>\n<h3 id=\"分享时间：\"><a href=\"#分享时间：\" class=\"headerlink\" title=\"分享时间：\"></a>分享时间：</h3><p> 以课程表为准</p>\n<h3 id=\"老师：\"><a href=\"#老师：\" class=\"headerlink\" title=\"老师：\"></a>老师：</h3><p>每条线都以目前这三个技术方向的几个主要负责人来作为主讲老师，持续系列分享。当然我更希望是在坐的每位同学，提前看教程，自主提出当老师。我觉得大家都是从0基础开始，每个人都有资格来当老师，哪怕当老师犯了错，下面有经验的学生也会纠正，对你本人收益也是最大的。所以我提倡这种自主行为，为此我会设立讲师奖励。</p>\n<h3 id=\"奖励：\"><a href=\"#奖励：\" class=\"headerlink\" title=\"奖励：\"></a>奖励：</h3><p>计划每个季度，对前三名讲师给予买书补贴（具体费用如下）。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">一次/一季度的前三名次数讲师: (80+100+120) * 4个季度 = 1200</div><div class=\"line\">一次/一季度的 Happy Time: 250 * 4 = 1000</div></pre></td></tr></table></figure></p>\n<p>分享博客站点： 1. 分享会讲师内容  2. 大家工作上或学习中的体会</p>\n","excerpt":"","more":"<h3 id=\"背景：\"><a href=\"#背景：\" class=\"headerlink\" title=\"背景：\"></a>背景：</h3><p>今年我和很多同学谈17年KPI的时候，发现很多同学都在说同一件事，就是想学习，想团队有一个持续的分享会，想有一个大牛来指导他们去学习。所以能看出来，大家都渴望新知识，都想团队有个持续的分享会。</p>\n<h3 id=\"现状：\"><a href=\"#现状：\" class=\"headerlink\" title=\"现状：\"></a>现状：</h3><p>目前分享会形式主要是‘散养’，大家自主选课题，自己感兴趣的主题分享，这种形式的分享有两个很大的困难</p>\n<ol>\n<li>不固定，不持久，想来一发就一发。</li>\n<li>主题与大家不match<br>主讲在上面说，下面的同学用很渴望的眼神认真的听着，但就是听不懂。我一般一次分享会做完后，我都用问过其中的一些同学，没对主讲课题做一些基础的准备的话，绝大多数人都是这种情况。所以这种形式的分享最佳收益者是主讲人，对于听众效果应该不是最好的。<br>所以年初来，我一直在考虑解决这个问题，能给大家一个固定又持久，不管对主讲还是对听众都有收获的分享会。</li>\n</ol>\n<p>正因为有目前分享会有这种问题，而且我们团队人越来越多啦，我相信团队对于这种分享技术的氛围会越来越强烈。所以我一直在想以哪种分享形式来解决这些问题。目前我有一些想法，也跟佳敏做了讨论，他还是肯定提倡我这种做法。所以我觉得是时候跟大家说下，看看大家的反馈。</p>\n<p>新分享会新主题增加：<strong> “回归技术教程，做系列分享”</strong></p>\n<h3 id=\"形式：\"><a href=\"#形式：\" class=\"headerlink\" title=\"形式：\"></a>形式：</h3><p>引入学校上课形式，会以17年团队技术KPI的三块：<strong> react框架、RN技术、node技术 </strong>找三本经典教程，去买PDF版本，分发给大家。分享会根据制定出一个课程表，以章节作为一个课时，每周一节课来分享三本教程中的每一章内容。量不大吧？这样只要大家提前去看，带着每章的问题来听课，内容上跟讲师也能match上，可能效果会更好些。</p>\n<h3 id=\"分享时间：\"><a href=\"#分享时间：\" class=\"headerlink\" title=\"分享时间：\"></a>分享时间：</h3><p> 以课程表为准</p>\n<h3 id=\"老师：\"><a href=\"#老师：\" class=\"headerlink\" title=\"老师：\"></a>老师：</h3><p>每条线都以目前这三个技术方向的几个主要负责人来作为主讲老师，持续系列分享。当然我更希望是在坐的每位同学，提前看教程，自主提出当老师。我觉得大家都是从0基础开始，每个人都有资格来当老师，哪怕当老师犯了错，下面有经验的学生也会纠正，对你本人收益也是最大的。所以我提倡这种自主行为，为此我会设立讲师奖励。</p>\n<h3 id=\"奖励：\"><a href=\"#奖励：\" class=\"headerlink\" title=\"奖励：\"></a>奖励：</h3><p>计划每个季度，对前三名讲师给予买书补贴（具体费用如下）。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">一次/一季度的前三名次数讲师: (80+100+120) * 4个季度 = 1200</div><div class=\"line\">一次/一季度的 Happy Time: 250 * 4 = 1000</div></pre></td></tr></table></figure></p>\n<p>分享博客站点： 1. 分享会讲师内容  2. 大家工作上或学习中的体会</p>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"cj0weljby0000kccdu7vmd94t","category_id":"cj0weljc70003kccdgh1a1qkn","_id":"cj0weljcg0008kccdguy6h4zk"},{"post_id":"cj0weljc40002kccdellcbszn","category_id":"cj0weljce0006kccd98qqoz7j","_id":"cj0weljci000bkccd7c0iv345"},{"post_id":"cj0weljca0005kccdvggpi25h","category_id":"cj0weljcg0009kccd0i3kjrdy","_id":"cj0weljci000ekccdzu6y2wcz"}],"PostTag":[{"post_id":"cj0weljby0000kccdu7vmd94t","tag_id":"cj0weljc90004kccdh3my9brx","_id":"cj0weljci000dkccdmr1bc1rd"},{"post_id":"cj0weljby0000kccdu7vmd94t","tag_id":"cj0weljcf0007kccdwiqfag7z","_id":"cj0weljci000fkccdab78mmn8"},{"post_id":"cj0weljby0000kccdu7vmd94t","tag_id":"cj0weljch000akccdi1ya4cgx","_id":"cj0weljcl000hkccd81l8bof0"},{"post_id":"cj0weljc40002kccdellcbszn","tag_id":"cj0weljci000ckccd87u4ggz8","_id":"cj0weljcl000ikccdvekz74w6"},{"post_id":"cj0weljca0005kccdvggpi25h","tag_id":"cj0weljcj000gkccd5dk2lsf7","_id":"cj0weljcp000jkccdj5hrox6i"}],"Tag":[{"name":"nodejs","_id":"cj0weljc90004kccdh3my9brx"},{"name":"了不起的nodejs","_id":"cj0weljcf0007kccdwiqfag7z"},{"name":"深入浅出nodejs","_id":"cj0weljch000akccdi1ya4cgx"},{"name":"reactjs","_id":"cj0weljci000ckccd87u4ggz8"},{"name":"公告","_id":"cj0weljcj000gkccd5dk2lsf7"}]}}